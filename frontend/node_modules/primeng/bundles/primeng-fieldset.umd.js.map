{"version":3,"file":"primeng-fieldset.umd.js","sources":["../../src/app/components/fieldset/fieldset.ts","../../src/app/components/fieldset/primeng-fieldset.ts"],"names":["EventEmitter","Component","trigger","state","style","transition","animate","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Input","Output","ContentChildren","PrimeTemplate","NgModule","CommonModule","RippleModule","SharedModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy, ViewEncapsulation, AfterContentInit, QueryList, ContentChildren, TemplateRef} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule, PrimeTemplate} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';  \n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-fieldset',\n    template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"p-fieldset-legend\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\" pRipple>\n                        <span class=\"p-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"p-fieldset-legend-text\">{{legend}}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                </ng-template>\n            </legend>\n            <div [attr.id]=\"id + '-content'\" class=\"p-toggleable-content\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \n                        [attr.aria-labelledby]=\"id\" [attr.aria-hidden]=\"collapsed\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\n                <div class=\"p-fieldset-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </div>\n            </div>\n        </fieldset>\n    `,\n    animations: [\n        trigger('fieldsetContent', [\n            state('hidden', style({\n                height: '0',\n                overflow: 'hidden'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\n            transition('void => *', animate(0))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./fieldset.css']\n})\nexport class Fieldset implements AfterContentInit,BlockableUI {\n\n    @Input() legend: string;\n\n    @Input() toggleable: boolean;\n\n    @Input() collapsed: boolean = false;\n\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public animating: boolean;\n\n    headerTemplate: TemplateRef<any>;\n\n    contentTemplate: TemplateRef<any>;\n    \n    constructor(private el: ElementRef) {}\n    \n    id: string = `p-fieldset-${idx++}`;\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n        \n    toggle(event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n            \n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});   \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Fieldset,SharedModule],\n    declarations: [Fieldset]\n})\nexport class FieldsetModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}