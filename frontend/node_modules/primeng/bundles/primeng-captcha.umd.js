(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('primeng/captcha', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,(global.primeng = global.primeng || {}, global.primeng.captcha = {}), global.ng.core, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, common) { 'use strict';

    var Captcha = /** @class */ (function () {
        function Captcha(el, _zone, cd) {
            this.el = el;
            this._zone = _zone;
            this.cd = cd;
            this.siteKey = null;
            this.theme = 'light';
            this.type = 'image';
            this.size = 'normal';
            this.tabindex = 0;
            this.language = null;
            this.initCallback = "initRecaptcha";
            this.onResponse = new core.EventEmitter();
            this.onExpire = new core.EventEmitter();
            this._instance = null;
        }
        Captcha.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (window.grecaptcha) {
                if (!window.grecaptcha.render) {
                    setTimeout(function () {
                        _this.init();
                    }, 100);
                }
                else {
                    this.init();
                }
            }
            else {
                window[this.initCallback] = function () {
                    _this.init();
                };
            }
        };
        Captcha.prototype.init = function () {
            var _this = this;
            this._instance = window.grecaptcha.render(this.el.nativeElement.children[0], {
                'sitekey': this.siteKey,
                'theme': this.theme,
                'type': this.type,
                'size': this.size,
                'tabindex': this.tabindex,
                'hl': this.language,
                'callback': function (response) { _this._zone.run(function () { return _this.recaptchaCallback(response); }); },
                'expired-callback': function () { _this._zone.run(function () { return _this.recaptchaExpiredCallback(); }); }
            });
        };
        Captcha.prototype.reset = function () {
            if (this._instance === null)
                return;
            window.grecaptcha.reset(this._instance);
            this.cd.markForCheck();
        };
        Captcha.prototype.getResponse = function () {
            if (this._instance === null)
                return null;
            return window.grecaptcha.getResponse(this._instance);
        };
        Captcha.prototype.recaptchaCallback = function (response) {
            this.onResponse.emit({
                response: response
            });
        };
        Captcha.prototype.recaptchaExpiredCallback = function () {
            this.onExpire.emit();
        };
        Captcha.prototype.ngOnDestroy = function () {
            if (this._instance != null) {
                window.grecaptcha.reset(this._instance);
            }
        };
Captcha.ɵfac = function Captcha_Factory(t) { return new (t || Captcha)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
Captcha.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Captcha, selectors: [["p-captcha"]], inputs: { siteKey: "siteKey", theme: "theme", type: "type", size: "size", tabindex: "tabindex", language: "language", initCallback: "initCallback" }, outputs: { onResponse: "onResponse", onExpire: "onExpire" }, decls: 1, vars: 0, template: function Captcha_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div");
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Captcha, [{
        type: core.Component,
        args: [{
                selector: 'p-captcha',
                template: "<div></div>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                encapsulation: core.ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }]; }, { siteKey: [{
            type: core.Input
        }], theme: [{
            type: core.Input
        }], type: [{
            type: core.Input
        }], size: [{
            type: core.Input
        }], tabindex: [{
            type: core.Input
        }], language: [{
            type: core.Input
        }], initCallback: [{
            type: core.Input
        }], onResponse: [{
            type: core.Output
        }], onExpire: [{
            type: core.Output
        }] }); })();
        return Captcha;
    }());
    Captcha.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.NgZone },
        { type: core.ChangeDetectorRef }
    ]; };
    Captcha.propDecorators = {
        siteKey: [{ type: core.Input }],
        theme: [{ type: core.Input }],
        type: [{ type: core.Input }],
        size: [{ type: core.Input }],
        tabindex: [{ type: core.Input }],
        language: [{ type: core.Input }],
        initCallback: [{ type: core.Input }],
        onResponse: [{ type: core.Output }],
        onExpire: [{ type: core.Output }]
    };
    var CaptchaModule = /** @class */ (function () {
        function CaptchaModule() {
        }
CaptchaModule.ɵfac = function CaptchaModule_Factory(t) { return new (t || CaptchaModule)(); };
CaptchaModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CaptchaModule });
CaptchaModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[common.CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CaptchaModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                exports: [Captcha],
                declarations: [Captcha]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CaptchaModule, { declarations: [Captcha], imports: [ɵngcc1.CommonModule], exports: [Captcha] }); })();
        return CaptchaModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Captcha = Captcha;
    exports.CaptchaModule = CaptchaModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=primeng-captcha.umd.js.map