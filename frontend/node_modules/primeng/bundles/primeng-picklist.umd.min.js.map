{"version":3,"sources":["../../src/app/components/picklist/picklist.ts"],"names":["PickList","el","cd","filterService","this","trackBy","index","item","showSourceFilter","showTargetFilter","metaKeySelection","showSourceControls","showTargetControls","disabled","filterMatchMode","breakpoint","onMoveToSource","EventEmitter","onMoveAllToSource","onMoveAllToTarget","onMoveToTarget","onSourceReorder","onTargetReorder","onSourceSelect","onTargetSelect","onSourceFilter","onTargetFilter","selectedItemsSource","selectedItemsTarget","id","UniqueComponentId","SOURCE_LIST","TARGET_LIST","prototype","ngOnInit","responsive","createStyle","ngAfterContentInit","_this","templates","forEach","getType","itemTemplate","template","emptyMessageSourceTemplate","emptyMessageTargetTemplate","ngAfterViewChecked","movedUp","movedDown","listItems","DomHandler","find","reorderedListElement","listItem","length","scrollInView","onItemClick","event","selectedItems","callback","findIndexInSelection","selected","itemTouched","metaKey","ctrlKey","shiftKey","splice","push","emit","originalEvent","items","onSourceItemDblClick","moveRight","onTargetItemDblClick","moveLeft","onFilter","data","listType","query","target","value","trim","toLocaleLowerCase","filterLocale","filter","searchFields","filterBy","split","filterValueSource","visibleOptionsSource","filterValueTarget","visibleOptionsTarget","isItemVisible","isVisibleInList","filterValue","i","onItemTouchEnd","sortByIndexInList","list","sort","item1","item2","findIndexInList","moveUp","listElement","selectedItem","selectedItemIndex","movedItem","temp","moveTop","unshift","scrollTop","moveDown","moveBottom","scrollHeight","source","moveAllRight","movedItems","removedItem","moveAllLeft","isSelected","onDrop","previousContainer","container","moveItemInArray","previousIndex","currentIndex","transferArrayItem","resetFilter","sourceFilterViewChild","nativeElement","targetFilterViewChild","onItemKeydown","currentTarget","which","nextItem","findNextItem","focus","preventDefault","prevItem","findPrevItem","nextElementSibling","hasClass","isHidden","previousElementSibling","styleElement","children","setAttribute","document","createElement","type","head","appendChild","innerHTML","destroyStyle","removeChild","ngOnDestroy","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","FilterService","Input","Output","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","ButtonModule","SharedModule","RippleModule","DragDropModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, AfterContentInit, AfterViewChecked, Input, Output, ContentChildren, QueryList, TemplateRef, EventEmitter, ViewChild, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonModule} from 'primeng/button';\nimport {SharedModule,PrimeTemplate,FilterService} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {RippleModule} from 'primeng/ripple';\nimport {CdkDragDrop, DragDropModule, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\nimport {UniqueComponentId} from 'primeng/utils';\n\n@Component({\n    selector: 'p-pickList',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'p-picklist p-component'\" cdkDropListGroup>\n            <div class=\"p-picklist-buttons p-picklist-source-controls\" *ngIf=\"showSourceControls\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n            </div>\n            <div class=\"p-picklist-list-wrapper p-picklist-source-wrapper\">\n                <div class=\"p-picklist-header\" *ngIf=\"sourceHeader\">\n                    <div class=\"p-picklist-title\">{{sourceHeader}}</div>\n                </div>\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showSourceFilter !== false\">\n                    <div class=\"p-picklist-filter\">\n                        <input #sourceFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,source,SOURCE_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"sourceFilterPlaceholder\" [attr.aria-label]=\"ariaSourceFilterLabel\">\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                \n                <ul #sourcelist class=\"p-picklist-list p-picklist-source\" cdkDropList [cdkDropListData]=\"source\" (cdkDropListDropped)=\"onDrop($event, SOURCE_LIST)\"\n                    [ngStyle]=\"sourceStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                    <ng-template ngFor let-item [ngForOf]=\"source\" [ngForTrackBy]=\"sourceTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsSource),'p-disabled': disabled}\" pRipple cdkDrag [cdkDragData]=\"item\"\n                            (click)=\"onItemClick($event,item,selectedItemsSource,onSourceSelect)\" (dblclick)=\"onSourceItemDblClick()\" (touchend)=\"onItemTouchEnd($event)\" (keydown)=\"onItemKeydown($event,item,selectedItemsSource,onSourceSelect)\"\n                            [style.display]=\"isItemVisible(item, SOURCE_LIST) ? 'block' : 'none'\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsSource)\">\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\n                        </li>\n                    </ng-template>\n                    <ng-container *ngIf=\"(source == null || source.length === 0) && emptyMessageSourceTemplate\">\n                        <li class=\"p-picklist-empty-message\">\n                            <ng-container *ngTemplateOutlet=\"emptyMessageSourceTemplate\"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class=\"p-picklist-buttons p-picklist-transfer-buttons\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-right\" [disabled]=\"disabled\" (click)=\"moveRight()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-right\" [disabled]=\"disabled\" (click)=\"moveAllRight()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-left\" [disabled]=\"disabled\" (click)=\"moveLeft()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-left\" [disabled]=\"disabled\" (click)=\"moveAllLeft()\"></button>\n            </div>\n            <div class=\"p-picklist-list-wrapper p-picklist-target-wrapper\">\n                <div class=\"p-picklist-header\" *ngIf=\"targetHeader\">\n                    <div class=\"p-picklist-title\" *ngIf=\"targetHeader\">{{targetHeader}}</div>\n                </div>\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showTargetFilter !== false\">\n                    <div class=\"p-picklist-filter\">\n                        <input #targetFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,target,TARGET_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"targetFilterPlaceholder\" [attr.aria-label]=\"ariaTargetFilterLabel\">\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                <ul #targetlist class=\"p-picklist-list p-picklist-target\" cdkDropList [cdkDropListData]=\"target\" (cdkDropListDropped)=\"onDrop($event, TARGET_LIST)\"\n                    [ngStyle]=\"targetStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                    <ng-template ngFor let-item [ngForOf]=\"target\" [ngForTrackBy]=\"targetTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsTarget), 'p-disabled': disabled}\" pRipple cdkDrag [cdkDragData]=\"item\"\n                            (click)=\"onItemClick($event,item,selectedItemsTarget,onTargetSelect)\" (dblclick)=\"onTargetItemDblClick()\" (touchend)=\"onItemTouchEnd($event)\" (keydown)=\"onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)\"\n                            [style.display]=\"isItemVisible(item, TARGET_LIST) ? 'block' : 'none'\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsTarget)\">\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\n                        </li>\n                    </ng-template>\n                    <ng-container *ngIf=\"(target == null || target.length === 0) && emptyMessageTargetTemplate\">\n                        <li class=\"p-picklist-empty-message\">\n                            <ng-container *ngTemplateOutlet=\"emptyMessageTargetTemplate\"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class=\"p-picklist-buttons p-picklist-target-controls\" *ngIf=\"showTargetControls\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./picklist.css']\n})\nexport class PickList implements AfterViewChecked,AfterContentInit {\n\n    @Input() source: any[];\n\n    @Input() target: any[];\n\n    @Input() sourceHeader: string;\n\n    @Input() targetHeader: string;\n\n    @Input() responsive: boolean;\n\n    @Input() filterBy: string;\n\n    @Input() filterLocale: string;\n\n    @Input() trackBy: Function = (index: number, item: any) => item;\n\n    @Input() sourceTrackBy: Function;\n\n    @Input() targetTrackBy: Function;\n\n    @Input() showSourceFilter: boolean = true;\n\n    @Input() showTargetFilter: boolean = true;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() dragdrop: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() sourceStyle: any;\n\n    @Input() targetStyle: any;\n\n    @Input() showSourceControls: boolean = true;\n\n    @Input() showTargetControls: boolean = true;\n\n    @Input() sourceFilterPlaceholder: string;\n\n    @Input() targetFilterPlaceholder: string;\n\n    @Input() disabled: boolean = false;\n\n    @Input() ariaSourceFilterLabel: string;\n\n    @Input() ariaTargetFilterLabel: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() breakpoint: string = \"960px\";\n\n    @Output() onMoveToSource: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveAllToSource: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveAllToTarget: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveToTarget: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetFilter: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('sourcelist') listViewSourceChild: ElementRef;\n\n    @ViewChild('targetlist') listViewTargetChild: ElementRef;\n\n    @ViewChild('sourceFilter') sourceFilterViewChild: ElementRef;\n\n    @ViewChild('targetFilter') targetFilterViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public itemTemplate: TemplateRef<any>;\n\n    public visibleOptionsSource: any[];\n\n    public visibleOptionsTarget: any[];\n\n    selectedItemsSource: any[] = [];\n\n    selectedItemsTarget: any[] = [];\n\n    reorderedListElement: any;\n\n    movedUp: boolean;\n\n    movedDown: boolean;\n\n    itemTouched: boolean;\n\n    styleElement: any;\n\n    id: string = UniqueComponentId();\n\n    filterValueSource: string;\n\n    filterValueTarget: string;\n\n    fromListType: number;\n\n    emptyMessageSourceTemplate: TemplateRef<any>;\n\n    emptyMessageTargetTemplate: TemplateRef<any>;\n\n    readonly SOURCE_LIST = -1;\n\n    readonly TARGET_LIST = 1;\n\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef, public filterService: FilterService) {}\n\n\n    ngOnInit() {\n        if (this.responsive) {\n            this.createStyle();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'emptymessagesource':\n                    this.emptyMessageSourceTemplate = item.template;\n                break;\n\n                case 'emptymessagetarget':\n                    this.emptyMessageTargetTemplate = item.template;\n                    break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewChecked() {\n        if (this.movedUp||this.movedDown) {\n            let listItems = DomHandler.find(this.reorderedListElement, 'li.p-highlight');\n            let listItem;\n\n            if (this.movedUp)\n                listItem = listItems[0];\n            else\n                listItem = listItems[listItems.length - 1];\n\n            DomHandler.scrollInView(this.reorderedListElement, listItem);\n            this.movedUp = false;\n            this.movedDown = false;\n            this.reorderedListElement = null;\n        }\n    }\n\n    onItemClick(event, item: any, selectedItems: any[], callback: EventEmitter<any>) {\n        if (this.disabled) {\n            return;\n        }\n\n        let index = this.findIndexInSelection(item,selectedItems);\n        let selected = (index != -1);\n        let metaSelection = this.itemTouched ? false : this.metaKeySelection;\n\n        if (metaSelection) {\n            let metaKey = (event.metaKey||event.ctrlKey||event.shiftKey);\n\n            if (selected && metaKey) {\n                selectedItems.splice(index, 1);\n            }\n            else {\n                if (!metaKey) {\n                    selectedItems.length = 0;\n                }\n                selectedItems.push(item);\n            }\n        }\n        else {\n            if (selected)\n                selectedItems.splice(index, 1);\n            else\n                selectedItems.push(item);\n        }\n\n        callback.emit({originalEvent: event, items: selectedItems});\n\n        this.itemTouched = false;\n    }\n\n    onSourceItemDblClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.moveRight();\n    }\n\n    onTargetItemDblClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.moveLeft();\n    }\n\n    onFilter(event: KeyboardEvent, data: any[], listType: number) {\n        let query = ((<HTMLInputElement> event.target).value.trim() as any).toLocaleLowerCase(this.filterLocale);\n        this.filter(query, data, listType);\n    }\n\n    filter(query: string, data: any[], listType: number) {\n        let searchFields = this.filterBy.split(',');\n\n        if (listType === this.SOURCE_LIST) {\n            this.filterValueSource = query;\n            this.visibleOptionsSource = this.filterService.filter(data, searchFields, this.filterValueSource, this.filterMatchMode, this.filterLocale);\n            this.onSourceFilter.emit({query: this.filterValueSource, value: this.visibleOptionsSource});\n        }\n        else if (listType === this.TARGET_LIST) {\n            this.filterValueTarget = query;\n            this.visibleOptionsTarget = this.filterService.filter(data, searchFields, this.filterValueTarget, this.filterMatchMode, this.filterLocale);\n            this.onTargetFilter.emit({query: this.filterValueTarget, value: this.visibleOptionsTarget});\n        }\n    }\n\n    isItemVisible(item: any, listType: number): boolean {\n        if (listType == this.SOURCE_LIST)\n            return this.isVisibleInList(this.visibleOptionsSource, item, this.filterValueSource);\n        else\n            return this.isVisibleInList(this.visibleOptionsTarget, item, this.filterValueTarget);\n    }\n\n    isVisibleInList(data: any[], item: any, filterValue: string): boolean {\n        if (filterValue && filterValue.trim().length) {\n            for(let i = 0; i < data.length; i++) {\n                if (item == data[i]) {\n                    return true;\n                }\n            }\n        }\n        else {\n            return true;\n        }\n    }\n\n    onItemTouchEnd(event) {\n        if (this.disabled) {\n            return;\n        }\n\n        this.itemTouched = true;\n    }\n\n    private sortByIndexInList(items: any[], list: any) {\n        return items.sort((item1, item2) =>\n            this.findIndexInList(item1, list) - this.findIndexInList(item2, list));\n    }\n\n    moveUp(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = 0; i < selectedItems.length; i++) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != 0) {\n                    let movedItem = list[selectedItemIndex];\n                    let temp = list[selectedItemIndex-1];\n                    list[selectedItemIndex-1] = movedItem;\n                    list[selectedItemIndex] = temp;\n                }\n                else {\n                    break;\n                }\n            }\n\n            this.movedUp = true;\n            this.reorderedListElement = listElement;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveTop(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = 0; i < selectedItems.length; i++) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != 0) {\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\n                    list.unshift(movedItem);\n                }\n                else {\n                    break;\n                }\n            }\n\n            listElement.scrollTop = 0;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveDown(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != (list.length - 1)) {\n                    let movedItem = list[selectedItemIndex];\n                    let temp = list[selectedItemIndex+1];\n                    list[selectedItemIndex+1] = movedItem;\n                    list[selectedItemIndex] = temp;\n                }\n                else {\n                    break;\n                }\n            }\n\n            this.movedDown = true;\n            this.reorderedListElement = listElement;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveBottom(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != (list.length - 1)) {\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\n                    list.push(movedItem);\n                }\n                else {\n                    break;\n                }\n            }\n\n            listElement.scrollTop = listElement.scrollHeight;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveRight() {\n        if (this.selectedItemsSource && this.selectedItemsSource.length) {\n            for(let i = 0; i < this.selectedItemsSource.length; i++) {\n                let selectedItem = this.selectedItemsSource[i];\n                if (this.findIndexInList(selectedItem, this.target) == -1) {\n                    this.target.push(this.source.splice(this.findIndexInList(selectedItem, this.source),1)[0]);\n                }\n            }\n            this.onMoveToTarget.emit({\n                items: this.selectedItemsSource\n            });\n            this.selectedItemsSource = [];\n\n            if (this.filterValueTarget) {\n                this.filter(this.filterValueTarget, this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    moveAllRight() {\n        if (this.source) {\n            let movedItems = [];\n\n            for(let i = 0; i < this.source.length; i++) {\n                if (this.isItemVisible(this.source[i], this.SOURCE_LIST)) {\n                    let removedItem = this.source.splice(i, 1)[0];\n                    this.target.push(removedItem);\n                    movedItems.push(removedItem);\n                    i--;\n                }\n            }\n\n            this.onMoveAllToTarget.emit({\n                items: movedItems\n            });\n\n            this.selectedItemsSource = [];\n\n            if (this.filterValueTarget) {\n                this.filter(this.filterValueTarget, this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    moveLeft() {\n        if (this.selectedItemsTarget && this.selectedItemsTarget.length) {\n            for(let i = 0; i < this.selectedItemsTarget.length; i++) {\n                let selectedItem = this.selectedItemsTarget[i];\n                if (this.findIndexInList(selectedItem, this.source) == -1) {\n                    this.source.push(this.target.splice(this.findIndexInList(selectedItem, this.target),1)[0]);\n                }\n            }\n            this.onMoveToSource.emit({\n                items: this.selectedItemsTarget\n            });\n\n            this.selectedItemsTarget = [];\n\n            if (this.filterValueSource) {\n                this.filter(this.filterValueSource, this.source, this.SOURCE_LIST);\n            }\n        }\n    }\n\n    moveAllLeft() {\n        if (this.target) {\n            let movedItems = [];\n\n            for(let i = 0; i < this.target.length; i++) {\n                if (this.isItemVisible(this.target[i], this.TARGET_LIST)) {\n                    let removedItem = this.target.splice(i, 1)[0];\n                    this.source.push(removedItem);\n                    movedItems.push(removedItem);\n                    i--;\n                }\n            }\n\n            this.onMoveAllToSource.emit({\n                items: movedItems\n            });\n\n            this.selectedItemsTarget = [];\n\n            if (this.filterValueSource) {\n                this.filter(this.filterValueSource, this.source, this.SOURCE_LIST);\n            }\n        }\n    }\n\n    isSelected(item: any, selectedItems: any[]) {\n        return this.findIndexInSelection(item, selectedItems) != -1;\n    }\n\n    findIndexInSelection(item: any, selectedItems: any[]): number {\n        return this.findIndexInList(item, selectedItems);\n    }\n\n    findIndexInList(item: any, list: any): number {\n        let index: number = -1;\n\n        if (list) {\n            for(let i = 0; i < list.length; i++) {\n                if (list[i] == item) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    onDrop(event: CdkDragDrop<string[]>, listType: number) {\n        if (event.previousContainer === event.container) {\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n\n            if (listType == this.SOURCE_LIST)\n                this.onSourceReorder.emit([event.item.data]);\n            else\n                this.onTargetReorder.emit([event.item.data]);\n        } \n        else {\n            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n\n            if (listType == this.SOURCE_LIST)\n                this.onMoveToSource.emit([event.item.data]);\n            else\n                this.onMoveToTarget.emit([event.item.data]);\n        }\n    }\n\n    resetFilter() {\n        this.visibleOptionsSource = null;\n        this.filterValueSource = null;\n        this.visibleOptionsTarget = null;\n        this.filterValueTarget = null;\n\n        (<HTMLInputElement> this.sourceFilterViewChild.nativeElement).value = '';\n        (<HTMLInputElement> this.targetFilterViewChild.nativeElement).value = '';\n    }\n\n    onItemKeydown(event: KeyboardEvent, item: any, selectedItems: any[], callback: EventEmitter<any>) {\n        let listItem = <HTMLLIElement> event.currentTarget;\n\n        switch(event.which) {\n            //down\n            case 40:\n                var nextItem = this.findNextItem(listItem);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //up\n            case 38:\n                var prevItem = this.findPrevItem(listItem);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.onItemClick(event, item, selectedItems, callback);\n                event.preventDefault();\n            break;\n        }\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return !DomHandler.hasClass(nextItem, 'p-picklist-item') || DomHandler.isHidden(nextItem) ? this.findNextItem(nextItem) : nextItem;\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return !DomHandler.hasClass(prevItem, 'p-picklist-item') || DomHandler.isHidden(prevItem) ? this.findPrevItem(prevItem) : prevItem;\n        else\n            return null;\n    }\n\n    createStyle() {\n        if (!this.styleElement) {\n            this.el.nativeElement.children[0].setAttribute(this.id, '');\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            document.head.appendChild(this.styleElement);\n\n            let innerHTML = `\n            @media screen and (max-width: ${this.breakpoint}) {\n                .p-picklist[${this.id}] {\n                    flex-direction: column;\n                }\n            \n                .p-picklist[${this.id}] .p-picklist-buttons {\n                    padding: var(--content-padding);\n                    flex-direction: row;\n                }\n            \n                .p-picklist[${this.id}] .p-picklist-buttons .p-button {\n                    margin-right: var(--inline-spacing);\n                    margin-bottom: 0;\n                }\n            \n                .p-picklist[${this.id}] .p-picklist-buttons .p-button:last-child {\n                    margin-right: 0;\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-right:before {\n                    content: \"\\\\e930\"\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-double-right:before {\n                    content: \"\\\\e92c\"\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-left:before {\n                    content: \"\\\\e933\"\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-double-left:before {\n                    content: \"\\\\e92f\"\n                }\n            }\n            `;\n            \n            this.styleElement.innerHTML = innerHTML;\n        }\n    }\n\n    destroyStyle() {\n        if (this.styleElement) {\n            document.head.removeChild(this.styleElement);\n            this.styleElement = null;``\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyStyle();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule,SharedModule,RippleModule,DragDropModule],\n    exports: [PickList,SharedModule,DragDropModule],\n    declarations: [PickList]\n})\nexport class PickListModule { }\n"]}