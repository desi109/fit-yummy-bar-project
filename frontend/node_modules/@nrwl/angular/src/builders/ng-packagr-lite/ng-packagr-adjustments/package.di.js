"use strict";
/**
 * Adapted from the original ng-packagr
 *
 * Wires everything together and provides it to the DI, but exchanges the parts
 * we want to implement with Nx specific functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NX_PACKAGE_PROVIDERS = exports.NX_PACKAGE_TRANSFORM = exports.PACKAGE_TRANSFORM_TOKEN = void 0;
const injection_js_1 = require("injection-js");
const transform_di_1 = require("ng-packagr/lib/graph/transform.di");
const project_di_1 = require("ng-packagr/lib/project.di");
const stylesheet_processor_di_1 = require("ng-packagr/lib/styles/stylesheet-processor.di");
const options_di_1 = require("ng-packagr/lib/ng-package/options.di");
const init_tsconfig_di_1 = require("ng-packagr/lib/ng-package/entry-point/init-tsconfig.di");
const analyse_sources_di_1 = require("ng-packagr/lib/ng-package/entry-point/analyse-sources.di");
const init_tsconfig_1 = require("./init-tsconfig");
const entry_point_di_1 = require("./entry-point.di");
const package_transform_1 = require("ng-packagr/lib/ng-package/package.transform");
exports.PACKAGE_TRANSFORM_TOKEN = new injection_js_1.InjectionToken(`nx.v1.packageTransform`);
exports.NX_PACKAGE_TRANSFORM = transform_di_1.provideTransform({
    provide: exports.PACKAGE_TRANSFORM_TOKEN,
    useFactory: package_transform_1.packageTransformFactory,
    deps: [
        project_di_1.PROJECT_TOKEN,
        options_di_1.OPTIONS_TOKEN,
        init_tsconfig_di_1.INIT_TS_CONFIG_TOKEN,
        analyse_sources_di_1.ANALYSE_SOURCES_TOKEN,
        entry_point_di_1.NX_ENTRY_POINT_TRANSFORM_TOKEN,
    ],
});
exports.NX_PACKAGE_PROVIDERS = [
    exports.NX_PACKAGE_TRANSFORM,
    options_di_1.DEFAULT_OPTIONS_PROVIDER,
    init_tsconfig_di_1.DEFAULT_TS_CONFIG_PROVIDER,
    stylesheet_processor_di_1.STYLESHEET_PROCESSOR,
    init_tsconfig_1.NX_INIT_TS_CONFIG_TRANSFORM,
    analyse_sources_di_1.ANALYSE_SOURCES_TRANSFORM,
];
//# sourceMappingURL=package.di.js.map