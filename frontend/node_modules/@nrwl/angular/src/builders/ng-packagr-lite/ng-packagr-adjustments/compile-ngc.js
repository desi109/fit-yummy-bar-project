"use strict";
/**
 * Adapted from the original ngPackagr source.
 *
 * Excludes the ngcc compilation which is not needed
 * since these libraries will be compiled by the ngtsc.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NX_COMPILE_NGC_TRANSFORM = exports.NX_COMPILE_NGC_TOKEN = exports.nxCompileNgcTransformFactory = void 0;
const tslib_1 = require("tslib");
const injection_js_1 = require("injection-js");
const transform_1 = require("ng-packagr/lib/graph/transform");
const transform_di_1 = require("ng-packagr/lib/graph/transform.di");
const nodes_1 = require("ng-packagr/lib/ng-package/nodes");
const compile_source_files_1 = require("ng-packagr/lib/ngc/compile-source-files");
const stylesheet_processor_di_1 = require("ng-packagr/lib/styles/stylesheet-processor.di");
const tsconfig_1 = require("ng-packagr/lib/ts/tsconfig");
const path = require("path");
const ts = require("typescript");
const nxCompileNgcTransformFactory = (StylesheetProcessor) => {
    return transform_1.transformFromPromise((graph) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        try {
            const entryPoint = graph.find(nodes_1.isEntryPointInProgress());
            const entryPoints = graph.filter(nodes_1.isEntryPoint);
            // Add paths mappings for dependencies
            const tsConfig = tsconfig_1.setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);
            // Compile TypeScript sources
            const { esm2015, declarations } = entryPoint.data.destinationFiles;
            const { moduleResolutionCache } = entryPoint.cache;
            const { basePath, cssUrl, styleIncludePaths, } = entryPoint.data.entryPoint;
            const stylesheetProcessor = new StylesheetProcessor(basePath, cssUrl, styleIncludePaths);
            yield compile_source_files_1.compileSourceFiles(graph, tsConfig, moduleResolutionCache, stylesheetProcessor, {
                outDir: path.dirname(esm2015),
                declarationDir: path.dirname(declarations),
                declaration: true,
                target: ts.ScriptTarget.ES2015,
            });
        }
        catch (error) {
            throw error;
        }
        return graph;
    }));
};
exports.nxCompileNgcTransformFactory = nxCompileNgcTransformFactory;
exports.NX_COMPILE_NGC_TOKEN = new injection_js_1.InjectionToken(`nx.v1.compileNgc`);
exports.NX_COMPILE_NGC_TRANSFORM = transform_di_1.provideTransform({
    provide: exports.NX_COMPILE_NGC_TOKEN,
    useFactory: exports.nxCompileNgcTransformFactory,
    deps: [stylesheet_processor_di_1.STYLESHEET_PROCESSOR_TOKEN],
});
//# sourceMappingURL=compile-ngc.js.map