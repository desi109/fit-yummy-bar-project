"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const architect_1 = require("@angular-devkit/architect");
const rxjs_1 = require("rxjs");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utils/buildable-libs-utils");
const path_1 = require("path");
const project_graph_1 = require("@nrwl/workspace/src/core/project-graph");
const operators_1 = require("rxjs/operators");
function buildApp(options, context) {
    const { buildTarget } = options, delegateOptions = tslib_1.__rest(options, ["buildTarget"]);
    // delete targetBuilder from options before passing into scheduleBuilder
    const targetBuilder = delegateOptions.targetBuilder || buildTarget;
    delete delegateOptions.targetBuilder;
    if (buildTarget) {
        const target = architect_1.targetFromTargetString(targetBuilder);
        return context.scheduleTarget(target, delegateOptions, {
            target: context.target,
            logger: context.logger,
        });
    }
    else {
        return context.scheduleBuilder('@angular-devkit/build-angular:browser', delegateOptions, {
            target: context.target,
            logger: context.logger,
        });
    }
}
function run(options, context) {
    const projGraph = project_graph_1.createProjectGraph();
    const { target, dependencies } = buildable_libs_utils_1.calculateProjectDependencies(projGraph, context);
    options.tsConfig = buildable_libs_utils_1.createTmpTsConfig(path_1.join(context.workspaceRoot, options.tsConfig), context.workspaceRoot, target.data.root, dependencies);
    return rxjs_1.of(buildable_libs_utils_1.checkDependentProjectsHaveBeenBuilt(context, dependencies)).pipe(operators_1.switchMap((result) => {
        if (result) {
            return rxjs_1.from(buildApp(options, context)).pipe(operators_1.switchMap((x) => x.result));
        }
        else {
            // just pass on the result
            return rxjs_1.of({ success: false });
        }
    }));
}
exports.default = architect_1.createBuilder(run);
//# sourceMappingURL=webpack-browser.impl.js.map