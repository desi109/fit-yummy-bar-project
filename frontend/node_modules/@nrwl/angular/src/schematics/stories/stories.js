"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storiesGenerator = exports.createAllStories = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const typescript_1 = require("typescript");
const ast_utils_1 = require("../../utils/ast-utils");
const project_type_1 = require("@nrwl/workspace/src/utils/project-type");
const ast_utils_2 = require("@nrwl/workspace/src/utils/ast-utils");
const literals_1 = require("@angular-devkit/core/src/utils/literals");
const core_1 = require("@angular-devkit/core");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
function default_1(schema) {
    return schematics_1.chain([
        createAllStories(schema.name, schema.generateCypressSpecs, schema.cypressProject),
    ]);
}
exports.default = default_1;
function createAllStories(projectName, generateCypressSpecs, cypressProject) {
    return (tree, context) => {
        context.logger.debug('adding .storybook folder to project');
        const projectPath = project_type_1.projectRootPath(tree, projectName);
        let moduleFilePaths = [];
        tree.getDir(projectPath).visit((filePath) => {
            if (!filePath.endsWith('.module.ts')) {
                return;
            }
            moduleFilePaths.push(filePath);
        });
        return schematics_1.chain(moduleFilePaths.map((moduleFilePath) => {
            const file = ast_utils_1.getTsSourceFile(tree, moduleFilePath);
            const ngModuleDecorators = ast_utils_1.getDecoratorMetadata(file, 'NgModule', '@angular/core');
            if (ngModuleDecorators.length === 0) {
                throw new schematics_1.SchematicsException(`No @NgModule decorator in ${moduleFilePath}`);
            }
            const ngModuleDecorator = ngModuleDecorators[0];
            const syntaxList = ngModuleDecorator.getChildren().find((node) => {
                return node.kind === typescript_1.SyntaxKind.SyntaxList;
            });
            const declarationsPropertyAssignment = syntaxList
                .getChildren()
                .find((node) => {
                return (node.kind === typescript_1.SyntaxKind.PropertyAssignment &&
                    node.getChildren()[0].getText() === 'declarations');
            });
            if (!declarationsPropertyAssignment) {
                context.logger.warn(literals_1.stripIndents `No stories generated because there were no components declared in ${moduleFilePath}. Hint: you can always generate stories later with the 'nx generate @nrwl/angular:stories --name=${projectName}' command`);
                return schematics_1.noop();
            }
            let declarationArray = declarationsPropertyAssignment
                .getChildren()
                .find((node) => node.kind === typescript_1.SyntaxKind.ArrayLiteralExpression);
            if (!declarationArray) {
                // Attempt to follow a variable instead of the literal
                const declarationVariable = declarationsPropertyAssignment
                    .getChildren()
                    .filter((node) => node.kind === typescript_1.SyntaxKind.Identifier)[1];
                const variableName = declarationVariable.getText();
                const variableDeclaration = ast_utils_2.findNodes(file, typescript_1.SyntaxKind.VariableDeclaration).find((variableDeclaration) => {
                    const identifier = variableDeclaration
                        .getChildren()
                        .find((node) => node.kind === typescript_1.SyntaxKind.Identifier);
                    return identifier.getText() === variableName;
                });
                if (variableDeclaration) {
                    declarationArray = variableDeclaration
                        .getChildren()
                        .find((node) => node.kind === typescript_1.SyntaxKind.ArrayLiteralExpression);
                }
                else {
                    context.logger.warn(literals_1.stripIndents `No stories generated because the declaration in ${moduleFilePath} is not an array literal or the variable could not be found. Hint: you can always generate stories later with the 'nx generate @nrwl/angular:stories --name=${projectName}' command`);
                    return schematics_1.noop();
                }
            }
            const declaredComponents = declarationArray
                .getChildren()
                .find((node) => node.kind === typescript_1.SyntaxKind.SyntaxList)
                .getChildren()
                .filter((node) => node.kind === typescript_1.SyntaxKind.Identifier)
                .map((node) => node.getText())
                .filter((name) => name.endsWith('Component'));
            const imports = file.statements.filter((statement) => statement.kind === typescript_1.SyntaxKind.ImportDeclaration);
            const modulePath = moduleFilePath.substr(0, moduleFilePath.lastIndexOf('/'));
            const componentInfo = declaredComponents.map((componentName) => {
                try {
                    const importStatement = imports.find((statement) => {
                        const namedImports = statement
                            .getChildren()
                            .find((node) => node.kind === typescript_1.SyntaxKind.ImportClause)
                            .getChildren()
                            .find((node) => node.kind === typescript_1.SyntaxKind.NamedImports);
                        if (namedImports === undefined)
                            return false;
                        const importedIdentifiers = namedImports
                            .getChildren()
                            .find((node) => node.kind === typescript_1.SyntaxKind.SyntaxList)
                            .getChildren()
                            .filter((node) => node.kind === typescript_1.SyntaxKind.ImportSpecifier)
                            .map((node) => node.getText());
                        return importedIdentifiers.includes(componentName);
                    });
                    const fullPath = importStatement
                        .getChildren()
                        .find((node) => node.kind === typescript_1.SyntaxKind.StringLiteral)
                        .getText()
                        .slice(1, -1);
                    // if it is a directory, search recursively for the component
                    let fullCmpImportPath = moduleFilePath.slice(0, moduleFilePath.lastIndexOf('/'));
                    if (fullCmpImportPath.startsWith('/')) {
                        fullCmpImportPath = fullCmpImportPath.slice(1, fullCmpImportPath.length);
                    }
                    const componentImportPath = core_1.join(core_1.normalize(fullCmpImportPath), fullPath);
                    const dir = tree.getDir(componentImportPath);
                    if (dir && dir.subfiles.length > 0) {
                        let path = null;
                        let componentFileName = null;
                        // search the fullPath for component declarations
                        tree.getDir(componentImportPath).visit((componentFilePath) => {
                            if (componentFilePath.endsWith('.ts')) {
                                const content = tree
                                    .read(componentFilePath)
                                    .toString('utf-8');
                                if (content.indexOf(`class ${componentName}`) > -1) {
                                    path = componentFilePath
                                        .slice(0, componentFilePath.lastIndexOf('/'))
                                        .replace(modulePath, '.');
                                    componentFileName = componentFilePath.slice(componentFilePath.lastIndexOf('/') + 1, componentFilePath.lastIndexOf('.'));
                                    return;
                                }
                            }
                        });
                        if (path === null) {
                            throw new schematics_1.SchematicsException(`Path to component ${componentName} couldn't be found. Please open an issue on https://github.com/nrwl/nx/issues.`);
                        }
                        return { name: componentName, path, componentFileName };
                    }
                    else {
                        const path = fullPath.slice(0, fullPath.lastIndexOf('/'));
                        const componentFileName = fullPath.slice(fullPath.lastIndexOf('/') + 1);
                        return { name: componentName, path, componentFileName };
                    }
                }
                catch (ex) {
                    context.logger.warn(`Could not generate a story for ${componentName}.  Error: ${ex}`);
                    return undefined;
                }
            });
            return schematics_1.chain(componentInfo
                .filter((info) => info !== undefined)
                .map((info) => schematics_1.chain([
                schematics_1.schematic('component-story', {
                    projectPath: modulePath,
                    componentName: info.name,
                    componentPath: info.path,
                    componentFileName: info.componentFileName,
                }),
                generateCypressSpecs
                    ? schematics_1.schematic('component-cypress-spec', {
                        projectName,
                        projectPath: modulePath,
                        cypressProject,
                        componentName: info.name,
                        componentPath: info.path,
                        componentFileName: info.componentFileName,
                    })
                    : () => { },
            ])));
        }));
    };
}
exports.createAllStories = createAllStories;
exports.storiesGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/angular', 'stories');
//# sourceMappingURL=stories.js.map