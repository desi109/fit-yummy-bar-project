"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLoadChildren = void 0;
const workspace_1 = require("@nrwl/workspace");
const path = require("path");
const ts = require("typescript");
const ast_utils_1 = require("../../../utils/ast-utils");
const devkit_1 = require("@nrwl/devkit");
function addLoadChildren(options) {
    return (host) => {
        const npmScope = workspace_1.getNpmScope(host);
        if (!host.exists(options.parentModule)) {
            throw new Error(`Cannot find '${options.parentModule}'`);
        }
        const moduleSource = host.read(options.parentModule).toString('utf-8');
        const sourceFile = ts.createSourceFile(options.parentModule, moduleSource, ts.ScriptTarget.Latest, true);
        workspace_1.insert(host, options.parentModule, [
            ...ast_utils_1.addRoute(options.parentModule, sourceFile, `{path: '${devkit_1.names(options.fileName).fileName}', loadChildren: () => import('${options.importPath}').then(module => module.${options.moduleName})}`),
        ]);
        const tsConfig = findClosestTsConfigApp(host, options.parentModule);
        if (tsConfig) {
            const tsConfigAppSource = host.read(tsConfig).toString('utf-8');
            const tsConfigAppFile = ts.createSourceFile(tsConfig, tsConfigAppSource, ts.ScriptTarget.Latest, true);
            const offset = devkit_1.offsetFromRoot(path.dirname(tsConfig));
            workspace_1.insert(host, tsConfig, [
                ...workspace_1.addIncludeToTsConfig(tsConfig, tsConfigAppFile, `\n    , "${offset}${options.projectRoot}/src/index.ts"\n`),
            ]);
        }
        else {
            // we should warn the user about not finding the config
        }
        return host;
    };
}
exports.addLoadChildren = addLoadChildren;
function findClosestTsConfigApp(host, parentModule) {
    const dir = path.parse(parentModule).dir;
    if (host.exists(`${dir}/tsconfig.app.json`)) {
        return `${dir}/tsconfig.app.json`;
    }
    else if (dir != '') {
        return findClosestTsConfigApp(host, dir);
    }
    else {
        return null;
    }
}
//# sourceMappingURL=add-load-children.js.map