"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addChildren = void 0;
const workspace_1 = require("@nrwl/workspace");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const ts = require("typescript");
const ast_utils_2 = require("../../../utils/ast-utils");
const devkit_1 = require("@nrwl/devkit");
function addChildren(options) {
    return (host) => {
        const npmScope = workspace_1.getNpmScope(host);
        if (!host.exists(options.parentModule)) {
            throw new Error(`Cannot find '${options.parentModule}'`);
        }
        const moduleSource = host.read(options.parentModule).toString('utf-8');
        const sourceFile = ts.createSourceFile(options.parentModule, moduleSource, ts.ScriptTarget.Latest, true);
        const constName = `${devkit_1.names(options.fileName).propertyName}Routes`;
        const importPath = `@${npmScope}/${options.projectDirectory}`;
        workspace_1.insert(host, options.parentModule, [
            ast_utils_1.insertImport(sourceFile, options.parentModule, `${options.moduleName}, ${constName}`, importPath),
            ...ast_utils_2.addImportToModule(sourceFile, options.parentModule, options.moduleName),
            ...ast_utils_2.addRoute(options.parentModule, sourceFile, `{path: '${devkit_1.names(options.fileName).fileName}', children: ${constName}}`),
        ]);
        return host;
    };
}
exports.addChildren = addChildren;
//# sourceMappingURL=add-children.js.map