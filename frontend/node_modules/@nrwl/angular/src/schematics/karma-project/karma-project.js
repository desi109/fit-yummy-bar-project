"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.karmaProjectGenerator = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const core_1 = require("@angular-devkit/core");
const devkit_1 = require("@nrwl/devkit");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
// TODO: @jjean implement skipSetupFile
function generateFiles(options) {
    return (host, context) => {
        const projectConfig = workspace_1.getProjectConfig(host, options.project);
        return schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign(Object.assign({ tmpl: '' }, options), { projectRoot: projectConfig.root, isLibrary: projectConfig.projectType === 'library', offsetFromRoot: devkit_1.offsetFromRoot(projectConfig.root) })),
            schematics_1.move(projectConfig.root),
        ]))(host, context);
    };
}
function updateTsConfig(options) {
    return (host) => {
        const projectConfig = workspace_1.getProjectConfig(host, options.project);
        return workspace_1.updateJsonInTree(core_1.join(projectConfig.root, 'tsconfig.json'), (json) => {
            return Object.assign(Object.assign({}, json), { references: [
                    ...(json.references || []),
                    {
                        path: './tsconfig.spec.json',
                    },
                ] });
        });
    };
}
function updateTsSpecConfig(options) {
    return (host) => {
        const projectConfig = workspace_1.getProjectConfig(host, options.project);
        const extraFiles = projectConfig.projectType === 'library' ? [] : ['src/polyfills.ts'];
        return workspace_1.updateJsonInTree(core_1.join(projectConfig.root, 'tsconfig.spec.json'), (json) => {
            return Object.assign(Object.assign({}, json), { files: [...json.files, ...extraFiles] });
        });
    };
}
function updateworkspaceJson(options) {
    return workspace_1.updateWorkspaceInTree((json) => {
        const projectConfig = json.projects[options.project];
        projectConfig.architect.test = {
            builder: '@angular-devkit/build-angular:karma',
            options: {
                main: core_1.join(core_1.normalize(projectConfig.sourceRoot), 'test.ts'),
                tsConfig: core_1.join(core_1.normalize(projectConfig.root), 'tsconfig.spec.json'),
                karmaConfig: core_1.join(core_1.normalize(projectConfig.root), 'karma.conf.js'),
            },
        };
        if (projectConfig.projectType === 'application') {
            projectConfig.architect.test.options = Object.assign(Object.assign({}, projectConfig.architect.test.options), { polyfills: core_1.join(core_1.normalize(projectConfig.sourceRoot), 'polyfills.ts'), styles: [], scripts: [], assets: [] });
        }
        if (projectConfig.architect.lint &&
            projectConfig.architect.lint.builder ===
                '@angular-devkit/build-angular:tslint') {
            projectConfig.architect.lint.options.tsConfig = [
                ...projectConfig.architect.lint.options.tsConfig,
                core_1.join(core_1.normalize(projectConfig.root), 'tsconfig.spec.json'),
            ];
        }
        return json;
    });
}
function check(options) {
    return (host) => {
        const projectConfig = workspace_1.getProjectConfig(host, options.project);
        if (projectConfig.architect.test) {
            throw new Error(`${options.project} already has a test architect option.`);
        }
    };
}
function default_1(options) {
    return schematics_1.chain([
        check(options),
        generateFiles(options),
        updateTsConfig(options),
        updateTsSpecConfig(options),
        updateworkspaceJson(options),
    ]);
}
exports.default = default_1;
exports.karmaProjectGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/angular', 'karma-project');
//# sourceMappingURL=karma-project.js.map