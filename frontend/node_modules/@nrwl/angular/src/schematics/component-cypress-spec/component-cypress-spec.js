"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentCypressSpecGenerator = exports.getKnobDefaultValue = exports.getComponentSelector = exports.createComponentSpecFile = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const typescript_1 = require("typescript");
const ast_utils_1 = require("../../utils/ast-utils");
const component_story_1 = require("../component-story/component-story");
const ast_utils_2 = require("@nrwl/workspace/src/utils/ast-utils");
const core_1 = require("@angular-devkit/core");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
function default_1(schema) {
    return schematics_1.chain([createComponentSpecFile(schema)]);
}
exports.default = default_1;
function createComponentSpecFile({ projectName, projectPath, componentName, componentPath, componentFileName, cypressProject, }) {
    return (tree, context) => {
        const e2eProjectName = cypressProject || `${projectName}-e2e`;
        const e2eLibIntegrationFolderPath = `${workspace_1.getProjectConfig(tree, e2eProjectName).sourceRoot}/integration`;
        const fullComponentPath = core_1.join(core_1.normalize(projectPath), componentPath, `${componentFileName}.ts`);
        const props = component_story_1.getInputPropertyDeclarations(tree, fullComponentPath).map((node) => {
            const decoratorContent = workspace_1.findNodes(workspace_1.findNodes(node, typescript_1.SyntaxKind.Decorator)[0], typescript_1.SyntaxKind.StringLiteral);
            const name = decoratorContent.length
                ? decoratorContent[0].getText().slice(1, -1)
                : node.name.getText();
            const type = component_story_1.getKnobType(node);
            const defaultValue = getKnobDefaultValue(node);
            return {
                name,
                type,
                defaultValue,
            };
        });
        const componentSelector = getComponentSelector(tree, fullComponentPath);
        return ast_utils_2.applyWithSkipExisting(schematics_1.url('./files'), [
            schematics_1.template({
                projectName,
                componentFileName: componentFileName,
                componentName: componentName,
                componentSelector,
                props,
                tmpl: '',
            }),
            schematics_1.move(`${e2eLibIntegrationFolderPath}/${componentPath}`),
        ]);
    };
}
exports.createComponentSpecFile = createComponentSpecFile;
function getComponentSelector(tree, path) {
    const file = ast_utils_1.getTsSourceFile(tree, path);
    const componentDecorators = ast_utils_1.getDecoratorMetadata(file, 'Component', '@angular/core');
    if (componentDecorators.length === 0) {
        throw new schematics_1.SchematicsException(`No @NgModule decorator in ${path}`);
    }
    const componentDecorator = componentDecorators[0];
    const selectorNode = (workspace_1.findNodes(componentDecorator, typescript_1.SyntaxKind.PropertyAssignment).find((node) => node.name.getText() === 'selector'));
    if (!selectorNode) {
        throw new schematics_1.SchematicsException(`No selector defined for the component in ${path}`);
    }
    return selectorNode.initializer.getText().slice(1, -1);
}
exports.getComponentSelector = getComponentSelector;
function getKnobDefaultValue(property) {
    if (!property.initializer) {
        return undefined;
    }
    switch (property.initializer.kind) {
        case typescript_1.SyntaxKind.StringLiteral:
            return property.initializer.getText().slice(1, -1);
        case typescript_1.SyntaxKind.NumericLiteral:
        case typescript_1.SyntaxKind.TrueKeyword:
        case typescript_1.SyntaxKind.FalseKeyword:
            return property.initializer.getText();
        default:
            return undefined;
    }
}
exports.getKnobDefaultValue = getKnobDefaultValue;
exports.componentCypressSpecGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/angular', 'component-cypress-spec');
//# sourceMappingURL=component-cypress-spec.js.map