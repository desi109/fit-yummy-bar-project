"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const upgrade_1 = require("../../utils/upgrade");
const ast_utils_1 = require("../../utils/ast-utils");
function updateMain(angularJsImport, options) {
    return (host) => {
        const { mainPath, moduleClassName, moduleSpec, bootstrapComponentClassName, bootstrapComponentFileName, } = ast_utils_1.readBootstrapInfo(host, options.project);
        host.overwrite(mainPath, 
        // prettier-ignore
        `import { enableProdMode, StaticProvider } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import * as angular from 'angular';
import { downgradeComponent, downgradeModule, setAngularJSGlobal } from '@angular/upgrade/static';

import { ${moduleClassName} } from '${moduleSpec}';
import { environment } from './environments/environment';
import '${angularJsImport}';
import { ${bootstrapComponentClassName} } from '${bootstrapComponentFileName}';

export function bootstrapAngular(extra: StaticProvider[]): any {
  setAngularJSGlobal(angular);
  if (environment.production) {
    enableProdMode();
  }
  return platformBrowserDynamic(extra)
    .bootstrapModule(${moduleClassName})
    .catch(err => console.log(err));
}

const downgraded = angular
  .module('downgraded', [downgradeModule(bootstrapAngular)])
  .directive('appRoot', downgradeComponent({ component: ${bootstrapComponentClassName}, propagateDigest: false }));

angular.bootstrap(document, ['${options.name}', downgraded.name]);`);
        return host;
    };
}
function rewriteBootstrapLogic(options) {
    return (host) => {
        const { modulePath, moduleSource, moduleClassName } = ast_utils_1.readBootstrapInfo(host, options.project);
        workspace_1.insert(host, modulePath, [
            ...workspace_1.addMethod(moduleSource, modulePath, {
                className: moduleClassName,
                methodHeader: 'ngDoBootstrap(): void',
                body: ``,
            }),
            ...ast_utils_1.removeFromNgModule(moduleSource, modulePath, 'bootstrap'),
        ]);
        return host;
    };
}
function addEntryComponentsToModule(options) {
    return (host) => {
        const { modulePath, moduleSource, bootstrapComponentClassName, } = ast_utils_1.readBootstrapInfo(host, options.project);
        workspace_1.insert(host, modulePath, ast_utils_1.addEntryComponents(moduleSource, modulePath, bootstrapComponentClassName));
        return host;
    };
}
function default_1(options) {
    var _a;
    const angularJsImport = (_a = options.angularJsImport) !== null && _a !== void 0 ? _a : options.name;
    return schematics_1.chain([
        updateMain(angularJsImport, options),
        addEntryComponentsToModule(options),
        rewriteBootstrapLogic(options),
        options.skipPackageJson ? schematics_1.noop() : upgrade_1.addUpgradeToPackageJson(),
        workspace_2.formatFiles(options),
    ]);
}
exports.default = default_1;
//# sourceMappingURL=downgrade-module.js.map