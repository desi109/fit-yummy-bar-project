"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDefaults = exports.addE2eTestRunner = exports.addUnitTestRunner = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const versions_1 = require("../../utils/versions");
const updateDependencies = () => workspace_1.addDepsToPackageJson({
    '@angular/animations': versions_1.angularVersion,
    '@angular/common': versions_1.angularVersion,
    '@angular/compiler': versions_1.angularVersion,
    '@angular/core': versions_1.angularVersion,
    '@angular/forms': versions_1.angularVersion,
    '@angular/platform-browser': versions_1.angularVersion,
    '@angular/platform-browser-dynamic': versions_1.angularVersion,
    '@angular/router': versions_1.angularVersion,
    rxjs: versions_1.rxjsVersion,
    tslib: '^2.0.0',
    'zone.js': '~0.11.4',
}, {
    '@angular/compiler-cli': versions_1.angularVersion,
    '@angular/language-service': versions_1.angularVersion,
    '@angular-devkit/build-angular': versions_1.angularVersion,
});
function addUnitTestRunner(options) {
    switch (options.unitTestRunner) {
        case "karma" /* Karma */:
            return schematics_1.schematic('karma', {});
        case "jest" /* Jest */:
            // TODO: remove this when we use `jest-preset-angular@9.0.0`
            process.env.npm_config_legacy_peer_deps = 'true';
            return schematics_1.chain([
                workspace_1.addDepsToPackageJson({}, {
                    'jest-preset-angular': versions_1.jestPresetAngularVersion,
                }),
                (host) => {
                    const packageJson = workspace_1.readJsonInTree(host, 'package.json');
                    if (packageJson.devDependencies['@nrwl/jest']) {
                        return schematics_1.noop();
                    }
                    return schematics_1.externalSchematic('@nrwl/jest', 'init', {}, {
                        interactive: false,
                    });
                },
            ]);
        default:
            return schematics_1.noop();
    }
}
exports.addUnitTestRunner = addUnitTestRunner;
function addE2eTestRunner(options) {
    switch (options.e2eTestRunner) {
        case "protractor" /* Protractor */:
            return (host) => {
                const packageJson = workspace_1.readJsonInTree(host, 'package.json');
                if (packageJson.devDependencies['protractor']) {
                    return schematics_1.noop();
                }
                return workspace_1.addDepsToPackageJson({}, {
                    protractor: '~7.0.0',
                    'jasmine-core': '~3.6.0',
                    'jasmine-spec-reporter': '~5.0.0',
                    '@types/jasmine': '~3.6.0',
                    '@types/jasminewd2': '~2.0.3',
                });
            };
        case "cypress" /* Cypress */:
            return (host) => {
                const packageJson = workspace_1.readJsonInTree(host, 'package.json');
                if (packageJson.devDependencies['@nrwl/cypress']) {
                    return schematics_1.noop();
                }
                return schematics_1.externalSchematic('@nrwl/cypress', 'ng-add', {}, {
                    interactive: false,
                });
            };
        default:
            return schematics_1.noop();
    }
}
exports.addE2eTestRunner = addE2eTestRunner;
function setDefaults(options) {
    const updateAngularWorkspace = workspace_1.updateWorkspace((workspace) => {
        workspace.extensions.schematics = workspace.extensions.schematics || {};
        workspace.extensions.schematics['@nrwl/angular:application'] = Object.assign({ style: options.style, linter: options.linter, unitTestRunner: options.unitTestRunner, e2eTestRunner: options.e2eTestRunner }, (workspace.extensions.schematics['@nrwl/angular:application'] || {}));
        workspace.extensions.schematics['@nrwl/angular:library'] = Object.assign({ style: options.style, linter: options.linter, unitTestRunner: options.unitTestRunner }, (workspace.extensions.schematics['@nrwl/angular:library'] || {}));
        workspace.extensions.schematics['@nrwl/angular:component'] = Object.assign({ style: options.style }, (workspace.extensions.schematics['@nrwl/angular:component'] || {}));
    });
    return schematics_1.chain([workspace_1.setDefaultCollection('@nrwl/angular'), updateAngularWorkspace]);
}
exports.setDefaults = setDefaults;
function addPostinstall() {
    return workspace_1.updateJsonInTree('package.json', (json, context) => {
        json.scripts = json.scripts || {};
        const command = 'ngcc --properties es2015 browser module main';
        if (!json.scripts.postinstall) {
            json.scripts.postinstall = command;
        }
        else if (!json.scripts.postinstall.includes('ngcc')) {
            json.scripts.postinstall = `${json.scripts.postinstall} && ${command}`;
        }
        return json;
    });
}
function default_1(options) {
    return schematics_1.chain([
        setDefaults(options),
        // TODO: Remove this when ngcc can be run in parallel
        addPostinstall(),
        updateDependencies(),
        addUnitTestRunner(options),
        addE2eTestRunner(options),
        workspace_1.formatFiles(options),
    ]);
}
exports.default = default_1;
//# sourceMappingURL=init.js.map