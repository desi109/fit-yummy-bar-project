"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentStoryGenerator = exports.getKnobDefaultValue = exports.getKnobType = exports.getInputDescriptors = exports.getInputPropertyDeclarations = exports.createComponentStoriesFile = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const typescript_1 = require("typescript");
const ast_utils_1 = require("../../utils/ast-utils");
const ast_utils_2 = require("@nrwl/workspace/src/utils/ast-utils");
const core_1 = require("@angular-devkit/core");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
function default_1(schema) {
    return schematics_1.chain([createComponentStoriesFile(schema)]);
}
exports.default = default_1;
function createComponentStoriesFile({ projectPath, componentName, componentPath, componentFileName, }) {
    return (tree, context) => {
        const props = getInputDescriptors(tree, core_1.join(core_1.normalize(projectPath), componentPath, `${componentFileName}.ts`));
        return ast_utils_2.applyWithSkipExisting(schematics_1.url('./files'), [
            schematics_1.template({
                componentFileName: componentFileName,
                componentName: componentName,
                props,
                tmpl: '',
            }),
            schematics_1.move(`${projectPath}/${componentPath}`),
        ]);
    };
}
exports.createComponentStoriesFile = createComponentStoriesFile;
function getInputPropertyDeclarations(tree, path) {
    const file = ast_utils_1.getTsSourceFile(tree, path);
    const decorators = ast_utils_2.getSourceNodes(file).filter((node) => node.kind === typescript_1.SyntaxKind.Decorator);
    return decorators
        .filter((decorator) => workspace_1.findNodes(decorator, typescript_1.SyntaxKind.Identifier).some((node) => node.getText() === 'Input'))
        .map((node) => node.parent);
}
exports.getInputPropertyDeclarations = getInputPropertyDeclarations;
function getInputDescriptors(tree, path) {
    return getInputPropertyDeclarations(tree, path).map((node) => {
        const decoratorContent = workspace_1.findNodes(workspace_1.findNodes(node, typescript_1.SyntaxKind.Decorator)[0], typescript_1.SyntaxKind.StringLiteral);
        const name = decoratorContent.length
            ? decoratorContent[0].getText().slice(1, -1)
            : node.name.getText();
        const type = getKnobType(node);
        const defaultValue = getKnobDefaultValue(node);
        return {
            name,
            type,
            defaultValue,
        };
    });
}
exports.getInputDescriptors = getInputDescriptors;
function getKnobType(property) {
    if (property.type) {
        const typeName = property.type.getText();
        const typeNameToKnobType = {
            string: 'text',
            number: 'number',
            boolean: 'boolean',
        };
        return typeNameToKnobType[typeName] || 'text';
    }
    if (property.initializer) {
        const initializerKindToKnobType = {
            [typescript_1.SyntaxKind.StringLiteral]: 'text',
            [typescript_1.SyntaxKind.NumericLiteral]: 'number',
            [typescript_1.SyntaxKind.TrueKeyword]: 'boolean',
            [typescript_1.SyntaxKind.FalseKeyword]: 'boolean',
        };
        return initializerKindToKnobType[property.initializer.kind] || 'text';
    }
    return 'text';
}
exports.getKnobType = getKnobType;
function getKnobDefaultValue(property) {
    const typeNameToDefault = {
        string: "''",
        number: '0',
        boolean: 'false',
    };
    return property.initializer
        ? property.initializer.getText()
        : property.type
            ? typeNameToDefault[property.type.getText()]
            : "''";
}
exports.getKnobDefaultValue = getKnobDefaultValue;
exports.componentStoryGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/angular', 'component-story');
//# sourceMappingURL=component-story.js.map