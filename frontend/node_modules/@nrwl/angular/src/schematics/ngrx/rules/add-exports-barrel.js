"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addExportsToBarrel = void 0;
const ts = require("typescript");
const path = require("path");
const workspace_1 = require("@nrwl/workspace");
const devkit_1 = require("@nrwl/devkit");
/**
 * Add ngrx feature exports to the public barrel in the feature library
 */
function addExportsToBarrel(options) {
    return (host) => {
        if (!host.exists(options.module)) {
            throw new Error(`Specified module path (${options.module}) does not exist`);
        }
        // Only update the public barrel for feature libraries
        if (options.root != true) {
            const moduleDir = path.dirname(options.module);
            const indexFilePath = path.join(moduleDir, '../index.ts');
            const hasFacade = options.facade == true;
            const addModels = options.syntax === 'creators';
            const className = `${devkit_1.names(options.name).className}`;
            const exportBarrels = options.barrels === true;
            const buffer = host.read(indexFilePath);
            if (!!buffer) {
                // AST to 'index.ts' barrel for the public API
                const indexSource = buffer.toString('utf-8');
                const indexSourceFile = ts.createSourceFile(indexFilePath, indexSource, ts.ScriptTarget.Latest, true);
                // Public API for the feature interfaces, selectors, and facade
                const { fileName } = devkit_1.names(options.name);
                const statePath = `./lib/${options.directory}/${fileName}`;
                workspace_1.insert(host, indexFilePath, [
                    ...workspace_1.addGlobal(indexSourceFile, indexFilePath, exportBarrels
                        ? `import * as ${className}Actions from '${statePath}.actions';`
                        : `export * from '${statePath}.actions';`),
                    ...workspace_1.addGlobal(indexSourceFile, indexFilePath, exportBarrels
                        ? `import * as ${className}Feature from '${statePath}.reducer';`
                        : `export * from '${statePath}.reducer';`),
                    ...workspace_1.addGlobal(indexSourceFile, indexFilePath, exportBarrels
                        ? `import * as ${className}Selectors from '${statePath}.selectors';`
                        : `export * from '${statePath}.selectors';`),
                    ...(exportBarrels
                        ? workspace_1.addGlobal(indexSourceFile, indexFilePath, `export { ${className}Actions, ${className}Feature, ${className}Selectors };`)
                        : []),
                    ...(addModels
                        ? workspace_1.addGlobal(indexSourceFile, indexFilePath, `export * from '${statePath}.models';`)
                        : []),
                    ...(hasFacade
                        ? workspace_1.addGlobal(indexSourceFile, indexFilePath, `export * from '${statePath}.facade';`)
                        : []),
                ]);
            }
        }
        return host;
    };
}
exports.addExportsToBarrel = addExportsToBarrel;
//# sourceMappingURL=add-exports-barrel.js.map