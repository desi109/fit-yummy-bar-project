"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const path_1 = require("path");
const core_1 = require("@angular-devkit/core");
function relativePath(path1, path2) {
    let path = core_1.relative(core_1.resolve(core_1.normalize('/'), core_1.normalize(path1)), core_1.resolve(core_1.normalize('/'), path2));
    if (!path.startsWith('../')) {
        path = `./${path}`;
    }
    return path;
}
function createEditorTsConfig(project, baseConfig) {
    let usesJest = false;
    let usesKarma = false;
    for (let [_, targetConfig] of project.targets) {
        if (targetConfig.builder === '@nrwl/jest:jest') {
            usesJest = usesJest || true;
        }
        else if (targetConfig.builder === '@angular-devkit/build-angular:karma') {
            usesKarma = usesKarma || true;
        }
    }
    let relativeBaseConfigPath = baseConfig
        ? relativePath(core_1.normalize(project.root), baseConfig)
        : null;
    return schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files'), [
        schematics_1.template({
            usesJest,
            usesKarma,
            baseConfigPath: relativeBaseConfigPath,
        }),
        schematics_1.move(project.root),
    ]));
}
function updateBaseConfig(project, baseConfig) {
    return workspace_1.updateJsonInTree(baseConfig, (json) => {
        json.references.push({
            path: relativePath(core_1.dirname(baseConfig), core_1.join(core_1.normalize(project.root), 'tsconfig.editor.json')),
        });
        return json;
    });
}
function createEditorTsConfigs(host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const workspace = yield workspace_1.getWorkspace(host);
        const rules = [];
        workspace.projects.forEach((project) => {
            project.targets.forEach((target) => {
                var _a;
                if (target.builder === '@angular-devkit/build-angular:browser') {
                    const baseConfig = ((_a = target.options) === null || _a === void 0 ? void 0 : _a.tsConfig)
                        ? core_1.resolve(core_1.dirname(core_1.normalize(target.options.tsConfig)), workspace_1.readJsonInTree(host, target.options.tsConfig).extends)
                        : null;
                    if (baseConfig &&
                        !Array.isArray(workspace_1.readJsonInTree(host, baseConfig).references)) {
                        return;
                    }
                    rules.push(createEditorTsConfig(project, baseConfig));
                    if (baseConfig) {
                        rules.push(updateBaseConfig(project, baseConfig));
                    }
                }
            });
        });
        return schematics_1.chain(rules);
    });
}
function default_1() {
    return schematics_1.chain([
        workspace_1.updatePackagesInPackageJson(path_1.join(__dirname, '../../../migrations.json'), '10.3.0'),
        createEditorTsConfigs,
        workspace_1.formatFiles(),
    ]);
}
exports.default = default_1;
//# sourceMappingURL=update-10-3-0.js.map