"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runMany = void 0;
const tslib_1 = require("tslib");
const run_command_1 = require("../tasks-runner/run-command");
const utils_1 = require("./utils");
const project_graph_1 = require("../core/project-graph");
const file_utils_1 = require("../core/file-utils");
const default_reporter_1 = require("../tasks-runner/default-reporter");
const empty_reporter_1 = require("../tasks-runner/empty-reporter");
const project_graph_utils_1 = require("../utilities/project-graph-utils");
const output_1 = require("../utilities/output");
const connect_to_nx_cloud_1 = require("./connect-to-nx-cloud");
const perf_hooks_1 = require("perf_hooks");
function runMany(parsedArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        perf_hooks_1.performance.mark('command-execution-begins');
        const { nxArgs, overrides } = utils_1.splitArgsIntoNxArgsAndOverrides(parsedArgs, 'run-many');
        yield connect_to_nx_cloud_1.connectToNxCloudUsingScan(nxArgs.scan);
        const projectGraph = project_graph_1.createProjectGraph();
        const projects = projectsToRun(nxArgs, projectGraph);
        const projectsNotExcluded = applyExclude(projects, nxArgs);
        const env = file_utils_1.readEnvironment(nxArgs.target, projectsNotExcluded);
        const filteredProjects = applyOnlyFailed(projectsNotExcluded, nxArgs, env);
        run_command_1.runCommand(filteredProjects, projectGraph, env, nxArgs, overrides, nxArgs.hideCachedOutput ? new empty_reporter_1.EmptyReporter() : new default_reporter_1.DefaultReporter(), null);
    });
}
exports.runMany = runMany;
function projectsToRun(nxArgs, projectGraph) {
    const allProjects = Object.values(projectGraph.nodes);
    if (nxArgs.all) {
        return runnableForTarget(allProjects, nxArgs.target).reduce((m, c) => ((m[c.name] = c), m), {});
    }
    else {
        checkForInvalidProjects(nxArgs, allProjects);
        let selectedProjects = allProjects.filter((p) => nxArgs.projects.indexOf(p.name) > -1);
        if (nxArgs.withDeps) {
            selectedProjects = Object.values(project_graph_1.withDeps(projectGraph, selectedProjects).nodes);
        }
        return runnableForTarget(selectedProjects, nxArgs.target, true).reduce((m, c) => ((m[c.name] = c), m), {});
    }
}
function applyExclude(projects, nxArgs) {
    return Object.keys(projects)
        .filter((key) => !(nxArgs.exclude || []).includes(key))
        .reduce((p, key) => {
        p[key] = projects[key];
        return p;
    }, {});
}
function applyOnlyFailed(projectsNotExcluded, nxArgs, env) {
    return Object.values(projectsNotExcluded).filter((n) => !nxArgs.onlyFailed || !env.workspaceResults.getResult(n.name));
}
function checkForInvalidProjects(nxArgs, allProjects) {
    const invalid = nxArgs.projects.filter((name) => !allProjects.find((p) => p.name === name));
    if (invalid.length !== 0) {
        throw new Error(`Invalid projects: ${invalid.join(', ')}`);
    }
}
function runnableForTarget(projects, target, strict = false) {
    const notRunnable = [];
    const runnable = [];
    for (let project of projects) {
        if (project_graph_utils_1.projectHasTarget(project, target)) {
            runnable.push(project);
        }
        else if (project_graph_1.isWorkspaceProject(project)) {
            notRunnable.push(project);
        }
    }
    if (strict && notRunnable.length) {
        output_1.output.warn({
            title: `the following do not have configuration for "${target}"`,
            bodyLines: notRunnable.map((p) => `- ${p.name}`),
        });
    }
    return runnable;
}
//# sourceMappingURL=run-many.js.map