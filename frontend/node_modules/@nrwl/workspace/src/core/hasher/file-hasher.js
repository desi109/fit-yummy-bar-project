"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultFileHasher = exports.FileHasher = void 0;
const git_hasher_1 = require("./git-hasher");
const fs_1 = require("fs");
const hashing_impl_1 = require("./hashing-impl");
const app_root_1 = require("../../utilities/app-root");
const perf_hooks_1 = require("perf_hooks");
class FileHasher {
    constructor(hashing) {
        this.hashing = hashing;
        this.fileHashes = {};
        this.workspaceFiles = [];
        this.usesGitForHashing = false;
        this.init();
    }
    clear() {
        this.fileHashes = {};
        this.workspaceFiles = [];
        this.usesGitForHashing = false;
    }
    init() {
        perf_hooks_1.performance.mark('init hashing:start');
        this.clear();
        this.getHashesFromGit();
        this.usesGitForHashing = Object.keys(this.fileHashes).length > 0;
        perf_hooks_1.performance.mark('init hashing:end');
        perf_hooks_1.performance.measure('init hashing', 'init hashing:start', 'init hashing:end');
    }
    hashFile(path, transformer) {
        const relativePath = path.startsWith(app_root_1.appRootPath)
            ? path.substr(app_root_1.appRootPath.length + 1)
            : path;
        if (!this.fileHashes[relativePath]) {
            this.fileHashes[relativePath] = this.processPath(path, transformer);
        }
        return this.fileHashes[relativePath];
    }
    getHashesFromGit() {
        const sliceIndex = app_root_1.appRootPath.length + 1;
        git_hasher_1.getFileHashes(app_root_1.appRootPath).forEach((hash, filename) => {
            this.fileHashes[filename.substr(sliceIndex)] = hash;
            /**
             * we have to store it separately because fileHashes can be modified
             * later on and can contain files that do not exist in the workspace
             */
            this.workspaceFiles.push(filename.substr(sliceIndex));
        });
    }
    processPath(path, transformer) {
        try {
            if (transformer) {
                const transformedFile = transformer(fs_1.readFileSync(path, 'utf-8'));
                return this.hashing.hashArray([transformedFile]);
            }
            else {
                return this.hashing.hashFile(path);
            }
        }
        catch (_a) {
            return '';
        }
    }
}
exports.FileHasher = FileHasher;
exports.defaultFileHasher = new FileHasher(hashing_impl_1.defaultHashing);
//# sourceMappingURL=file-hasher.js.map