"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readCurrentProjectGraph = exports.createProjectGraph = void 0;
const devkit_1 = require("@nrwl/devkit");
const app_root_1 = require("../../utilities/app-root");
const assert_workspace_validity_1 = require("../assert-workspace-validity");
const file_graph_1 = require("../file-graph");
const file_utils_1 = require("../file-utils");
const normalize_nx_json_1 = require("../normalize-nx-json");
const build_dependencies_1 = require("./build-dependencies");
const build_nodes_1 = require("./build-nodes");
const nx_deps_cache_1 = require("../nx-deps/nx-deps-cache");
const perf_hooks_1 = require("perf_hooks");
function createProjectGraph(workspaceJson = file_utils_1.readWorkspaceJson(), nxJson = file_utils_1.readNxJson(), workspaceFiles = file_utils_1.readWorkspaceFiles()) {
    const cacheEnabled = process.env.NX_CACHE_PROJECT_GRAPH !== 'false';
    let cache = cacheEnabled ? nx_deps_cache_1.readCache() : false;
    assert_workspace_validity_1.assertWorkspaceValidity(workspaceJson, nxJson);
    const normalizedNxJson = normalize_nx_json_1.normalizeNxJson(nxJson);
    const rootFiles = file_utils_1.rootWorkspaceFileData();
    const projectFileMap = file_graph_1.createProjectFileMap(workspaceJson, workspaceFiles);
    if (cache && !file_utils_1.filesChanged(rootFiles, cache.rootFiles)) {
        const diff = nx_deps_cache_1.differentFromCache(projectFileMap, cache);
        if (diff.noDifference) {
            return addWorkspaceFiles(diff.partiallyConstructedProjectGraph, workspaceFiles);
        }
        const ctx = {
            workspaceJson,
            nxJson: normalizedNxJson,
            fileMap: diff.filesDifferentFromCache,
        };
        const projectGraph = buildProjectGraph(ctx, diff.partiallyConstructedProjectGraph);
        if (cacheEnabled) {
            nx_deps_cache_1.writeCache(rootFiles, projectGraph);
        }
        return addWorkspaceFiles(projectGraph, workspaceFiles);
    }
    else {
        const ctx = {
            workspaceJson,
            nxJson: normalizedNxJson,
            fileMap: projectFileMap,
        };
        const projectGraph = buildProjectGraph(ctx, null);
        if (cacheEnabled) {
            nx_deps_cache_1.writeCache(rootFiles, projectGraph);
        }
        return addWorkspaceFiles(projectGraph, workspaceFiles);
    }
}
exports.createProjectGraph = createProjectGraph;
function readCurrentProjectGraph() {
    const cache = nx_deps_cache_1.readCache();
    return cache === false ? null : cache;
}
exports.readCurrentProjectGraph = readCurrentProjectGraph;
function addWorkspaceFiles(projectGraph, allWorkspaceFiles) {
    return Object.assign(Object.assign({}, projectGraph), { allWorkspaceFiles });
}
function buildProjectGraph(ctx, projectGraph) {
    perf_hooks_1.performance.mark('build project graph:start');
    const builder = new devkit_1.ProjectGraphBuilder(projectGraph);
    const buildNodesFns = [
        build_nodes_1.buildWorkspaceProjectNodes,
        build_nodes_1.buildNpmPackageNodes,
    ];
    const buildDependenciesFns = [
        build_dependencies_1.buildExplicitTypeScriptDependencies,
        build_dependencies_1.buildImplicitProjectDependencies,
        build_dependencies_1.buildExplicitPackageJsonDependencies,
    ];
    buildNodesFns.forEach((f) => f(ctx, builder.addNode.bind(builder)));
    buildDependenciesFns.forEach((f) => f(ctx, builder.nodes, builder.addDependency.bind(builder)));
    const r = builder.getProjectGraph();
    const plugins = (ctx.nxJson.plugins || []).map((path) => {
        const pluginPath = require.resolve(path, {
            paths: [app_root_1.appRootPath],
        });
        return require(pluginPath);
    });
    const projects = Object.keys(ctx.workspaceJson.projects).reduce((map, projectName) => {
        map[projectName] = Object.assign(Object.assign({}, ctx.workspaceJson.projects[projectName]), ctx.nxJson.projects[projectName]);
        return map;
    }, {});
    const context = {
        workspace: Object.assign(Object.assign(Object.assign({}, ctx.workspaceJson), ctx.nxJson), { projects }),
        fileMap: ctx.fileMap,
    };
    const result = plugins.reduce((graph, plugin) => {
        if (!plugin.processProjectGraph) {
            return graph;
        }
        return plugin.processProjectGraph(graph, context);
    }, r);
    perf_hooks_1.performance.mark('build project graph:end');
    perf_hooks_1.performance.measure('build project graph', 'build project graph:start', 'build project graph:end');
    return result;
}
//# sourceMappingURL=project-graph.js.map