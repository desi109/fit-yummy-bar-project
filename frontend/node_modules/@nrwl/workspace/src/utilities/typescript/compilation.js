"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileTypeScript = void 0;
const devkit_1 = require("@nrwl/devkit");
const fs_extra_1 = require("fs-extra");
const ts = require("typescript");
const typescript_1 = require("../typescript");
function compileTypeScript(options) {
    const normalizedOptions = normalizeOptions(options);
    if (normalizedOptions.deleteOutputPath) {
        fs_extra_1.removeSync(normalizedOptions.outputPath);
    }
    const tsConfig = typescript_1.readTsConfig(normalizedOptions.tsConfig);
    tsConfig.options.outDir = normalizedOptions.outputPath;
    tsConfig.options.noEmitOnError = true;
    tsConfig.options.rootDir = normalizedOptions.rootDir;
    if (normalizedOptions.watch) {
        return createWatchProgram(tsConfig);
    }
    else {
        return createProgram(tsConfig, normalizedOptions.projectName);
    }
}
exports.compileTypeScript = compileTypeScript;
function createProgram(tsconfig, projectName) {
    const host = ts.createCompilerHost(tsconfig.options);
    const program = ts.createProgram({
        rootNames: tsconfig.fileNames,
        options: tsconfig.options,
        host,
    });
    devkit_1.logger.info(`Compiling TypeScript files for project "${projectName}"...`);
    const results = program.emit();
    if (results.emitSkipped) {
        const diagnostics = ts.formatDiagnosticsWithColorAndContext(results.diagnostics, {
            getCurrentDirectory: () => ts.sys.getCurrentDirectory(),
            getNewLine: () => ts.sys.newLine,
            getCanonicalFileName: (name) => name,
        });
        devkit_1.logger.error(diagnostics);
        throw new Error(diagnostics);
    }
    else {
        devkit_1.logger.info(`Done compiling TypeScript files for project "${projectName}".`);
        return { success: true };
    }
}
function createWatchProgram(tsconfig) {
    const host = ts.createWatchCompilerHost(tsconfig.fileNames, tsconfig.options, ts.sys);
    ts.createWatchProgram(host);
    return { success: true };
}
function normalizeOptions(options) {
    var _a, _b;
    return Object.assign(Object.assign({}, options), { deleteOutputPath: (_a = options.deleteOutputPath) !== null && _a !== void 0 ? _a : true, rootDir: (_b = options.rootDir) !== null && _b !== void 0 ? _b : options.projectRoot });
}
//# sourceMappingURL=compilation.js.map