"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunOneReporter = void 0;
const output_1 = require("../utilities/output");
class RunOneReporter {
    constructor(initiatingProject) {
        this.initiatingProject = initiatingProject;
    }
    beforeRun(projectNames, tasks, args, taskOverrides) {
        if (process.env.NX_INVOKED_BY_RUNNER) {
            return;
        }
        this.projectNames = projectNames;
        const numberOfDeps = tasks.length - 1;
        if (numberOfDeps > 0) {
            output_1.output.log({
                title: `${output_1.output.colors.gray('Running target')} ${args.target} ${output_1.output.colors.gray('for project')} ${this.initiatingProject} ${output_1.output.colors.gray(`and`)} ${numberOfDeps} task(s) ${output_1.output.colors.gray(`that it depends on.`)}
        `,
            });
            output_1.output.addVerticalSeparatorWithoutNewLines();
        }
    }
    printResults(args, startedWithFailedProjects, tasks, failedTasks, tasksWithFailedDependencies, cachedTasks) {
        // Silent for a single task
        if (process.env.NX_INVOKED_BY_RUNNER) {
            return;
        }
        output_1.output.addNewline();
        output_1.output.addVerticalSeparatorWithoutNewLines();
        if (failedTasks.length === 0) {
            const bodyLines = cachedTasks.length > 0
                ? [
                    output_1.output.colors.gray(`Nx read the output from cache instead of running the command for ${cachedTasks.length} out of ${tasks.length} tasks.`),
                ]
                : [];
            output_1.output.success({
                title: `Running target "${args.target}" succeeded`,
                bodyLines,
            });
            if (args.onlyFailed && startedWithFailedProjects) {
                output_1.output.warn({
                    title: `Only projects ${output_1.output.underline('which had previously failed')} were run`,
                    bodyLines: [
                        `You should verify by running ${output_1.output.underline('without')} ${output_1.output.bold('--only-failed')}`,
                    ],
                });
            }
        }
        else {
            const bodyLines = [
                output_1.output.colors.gray('Failed tasks:'),
                '',
                ...failedTasks.map((task) => `${output_1.output.colors.gray('-')} ${task.id}`),
            ];
            output_1.output.error({
                title: `Running target "${this.initiatingProject}:${args.target}" failed`,
                bodyLines,
            });
        }
    }
}
exports.RunOneReporter = RunOneReporter;
//# sourceMappingURL=run-one-reporter.js.map